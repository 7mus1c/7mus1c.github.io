import{_ as s,c as a,o as e,N as o}from"./chunks/framework.0799945b.js";const A=JSON.parse('{"title":"Promise","description":"","frontmatter":{},"headers":[],"relativePath":"blog/js/promise.md"}'),n={name:"blog/js/promise.md"},l=o('<h1 id="promise" tabindex="-1">Promise <a class="header-anchor" href="#promise" aria-label="Permalink to &quot;Promise&quot;">​</a></h1><p>先看一下 Promise 的基本用法</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> promise </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">reject</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#676E95;font-style:italic;">/* 异步操作成功 */</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">reject</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="基础分析" tabindex="-1">基础分析 <a class="header-anchor" href="#基础分析" aria-label="Permalink to &quot;基础分析&quot;">​</a></h2><pre><code>通过用法可以知道 Promise 肯定是一个类，接收一个`callback`函数。\n</code></pre><p>通过<code>resolve</code>来返回成功，<code>reject</code>来返回失败。</p><h2 id="三个状态" tabindex="-1">三个状态 <a class="header-anchor" href="#三个状态" aria-label="Permalink to &quot;三个状态&quot;">​</a></h2><pre><code>什么时候返回成功，什么时候返回失败？\n那肯定是有三个状态的`pending(进行中)、fulfilled(已成功)、rejected(已失败)`。\n一开始执行的时候状态肯定是`pending`的，那么当状态变成`fulfilled`时执行`resolve`,`rejected`时执行`reject`。\n</code></pre><p>状态只会从<code>pending</code> -&gt; <code>fulfilled</code> 或者 <code>pending</code> -&gt; <code>rejected</code>。一旦改变，那么将不可再更改。</p>',9),p=[l];function t(c,r,i,y,d,F){return e(),a("div",null,p)}const C=s(n,[["render",t]]);export{A as __pageData,C as default};
